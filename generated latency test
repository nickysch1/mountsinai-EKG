import time
import pyfirmata2
import statistics

SERIAL_PORT = 'COM4'  

def main():
    try:
        print(f"Attempting to connect to {SERIAL_PORT}...")
        board = pyfirmata2.Arduino('COM4')
        
        # Configure analog input pin for event-driven reading (same as arduinoEKG)
        analogInput = board.get_pin('a:0:i')
        analogInput.enable_reporting()
        
        print(f"Connected to {SERIAL_PORT} using pyfirmata2.")
        print("Waiting for Arduino to stabilize...")
        time.sleep(2)  # Give Arduino time to start reporting
        
        print("Starting latency measurement...")
        print("Request Time | Response Time | Latency (ms) | Value")
        print("-" * 60)
        
        latencies = []
        measurement_count = 100
        
        for i in range(measurement_count):
            # Record request time (when we request the current value)
            request_time = time.perf_counter_ns()
            
            # Get the current analog value (same as arduinoEKG approach)
            analog_value = analogInput.value
            
            # Record response time immediately after getting the value
            response_time_ns = time.perf_counter_ns()
            
            # Calculate latency
            latency_ns = response_time_ns - request_time
            latency_ms = latency_ns / 1_000_000
            
            # Only record if we got a valid value
            if analog_value is not None:
                print(f"{request_time} | {response_time_ns} | {latency_ms:.2f} ms | {analog_value:.6f}")
                latencies.append(latency_ms)
            else:
                print(f"{request_time} | {response_time_ns} | {latency_ms:.2f} ms | None (no reading)")
            
            # Brief pause between measurements
            time.sleep(0.01)
        
        # Calculate and display statistics
        if latencies:
            print("\n" + "="*60)
            print("LATENCY STATISTICS:")
            print(f"Total measurements: {len(latencies)}")
            print(f"Average latency: {statistics.mean(latencies):.2f} ms")
            print(f"Median latency: {statistics.median(latencies):.2f} ms")
            print(f"Min latency: {min(latencies):.2f} ms")
            print(f"Max latency: {max(latencies):.2f} ms")
            if len(latencies) > 1:
                print(f"Standard deviation: {statistics.stdev(latencies):.2f} ms")
        else:
            print("No successful measurements!")
            
    except KeyboardInterrupt:
        print("\nStopped by user.")
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if 'board' in locals():
            try:
                board.exit()
                print("Arduino connection closed.")
            except:
                pass
        
    

if __name__ == "__main__":
    main()
